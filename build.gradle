/*
 *     Copyright 2015-2017 Austin Keener & Michael Ritter & Florian Spie√ü
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//to build everything:             "gradlew build"
//to build and upload everything:  "gradlew bintrayUpload"

import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'com.jfrog.bintray' version '1.7.3'
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'com.github.ben-manes.versions' version '0.15.0'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

def versionObj = new Version(major: 3, minor: 3, revision: 1)

group = "net.dv8tion"
archivesBaseName = "JDA"
version = "$versionObj"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

sourceSets {
    examples {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

dependencies {
    //Code safety
    compile 'com.google.code.findbugs:jsr305:3.0.2'

    //Logger
    compile 'org.slf4j:slf4j-api:1.7.25'

    //General Utility
    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'org.json:json:20160810'
    compile 'net.sf.trove4j:trove4j:3.0.3'

    //Native Library Support
    compile 'net.java.dev.jna:jna:4.4.0'

    //Web Connection Support
    compile 'com.neovisionaries:nv-websocket-client:2.2'
    compile 'com.squareup.okhttp3:okhttp:3.8.1'

    //Sets the dependencies for the examples
    examplesCompile configurations.compile
    examplesRuntime configurations.runtime
}

task sourcesForRelease(type: Copy) {
    from 'src/main/java'
    into 'build/filteredSrc'
    filter(ReplaceTokens, tokens: [
            versionMajor: versionObj.major.toString(),
            versionMinor: versionObj.minor.toString(),
            versionRevision: versionObj.revision.toString(),
            versionBuild: versionObj.build.toString()
        ])
}

compileJava {
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath

    options.encoding = 'UTF-8'

    dependsOn sourcesForRelease
}

jar {
    baseName = project.name
    manifest {
        attributes 'Implementation-Version': version
    }
}

shadowJar {
    classifier = "withDependencies"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from "${buildDir}/filteredSrc"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    failOnError = false
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.author()
    options.encoding = 'UTF-8'
    options.addStringOption('-html5')

    //### excludes ###
    //jda internals
    exclude('net/dv8tion/jda/bot/entities/impl')
    exclude('net/dv8tion/jda/bot/handle')
    exclude('net/dv8tion/jda/bot/managers/impl')

    exclude('net/dv8tion/jda/client/entities/impl')
    exclude('net/dv8tion/jda/client/handle')
    exclude('net/dv8tion/jda/client/managers/impl')

    exclude('net/dv8tion/jda/core/audio/AudioConnection.java',
            'net/dv8tion/jda/core/audio/AudioWebSocket.java',
            'net/dv8tion/jda/core/audio/AudioPacket.java',
            'net/dv8tion/jda/core/audio/Decoder.java',
            'net/dv8tion/jda/core/audio/hooks/ListenerProxy.java')
    exclude('net/dv8tion/jda/core/entities/impl')
    exclude('net/dv8tion/jda/core/entities/EntityBuilder.java')
    exclude('net/dv8tion/jda/core/handle')
    exclude('net/dv8tion/jda/core/managers/impl')
    exclude('net/dv8tion/jda/core/requests/GuildLock.java',
            'net/dv8tion/jda/core/requests/WebSocketClient.java',
            'net/dv8tion/jda/core/requests/RateLimiter.java',
            'net/dv8tion/jda/core/requests/Request.java',
            'net/dv8tion/jda/core/requests/Route.java',
            'net/dv8tion/jda/core/requests/Requester.java',
            'net/dv8tion/jda/core/requests/Response.java',
            'net/dv8tion/jda/core/requests/ratelimit',
            'net/dv8tion/jda/core/requests/restaction/CompletedFuture.java',
            'net/dv8tion/jda/core/requests/restaction/RequestFuture.java')
    exclude('net/dv8tion/jda/core/utils/cache/impl')

    //opuswrapper
    exclude('tomp2p/opuswrapper')
    
    //voice crypto
    exclude('com/iwebpp/crypto')
}

bintray {
    user = bintrayUsername
    key = bintrayApiKey
    publications = ["BintrayRelease"]
    pkg {
        repo = 'maven'
        name = 'JDA'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/DV8FromTheWorld/JDA.git'
        publish = true
        version {
            name = project.version
            released = new Date()
        }
    }
}

publishing {
    publications {
        BintrayRelease(MavenPublication) {
            from components.java
            groupId group
            artifactId archivesBaseName
            version version
            artifact javadocJar
            artifact sourcesJar
        }
    }
}

String getProjectProperty(String propertyName)
{
    String property = ""
    if (hasProperty(propertyName))
    {
        property = this.properties[propertyName]
    }
    return property
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}

build {
    dependsOn clean
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar
    dependsOn shadowJar

    jar.mustRunAfter clean
    javadocJar.mustRunAfter jar
    sourcesJar.mustRunAfter javadocJar
    shadowJar.mustRunAfter sourcesJar
}

bintrayUpload {
    dependsOn build
    
    onlyIf { !getProjectProperty("bintrayUsername").empty }
    onlyIf { !getProjectProperty("bintrayApiKey").empty }
    onlyIf { System.getenv("BUILD_NUMBER") }
}

class Version {
    String major, minor, revision

    String getBuild() {
        System.getenv("BUILD_NUMBER") ?: System.getProperty("BUILD_NUMBER") ?: "DEV"
    }

    String toString() {
        "${major}.${minor}.${revision}_$build"
    }
}
